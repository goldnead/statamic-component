<?php

namespace Goldnead\StatamicComponent;

use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\File;
use Statamic\Support\Str;

class Component
{
    public $fieldsetTypes = [];

    private $name;

    private $handle;

    /**
     * This function returns the handle property of the current object.
     *
     * @return The `getHandle()` function is returning the value of the `` property of the
     * object.
     */
    public function getHandle()
    {
        return $this->handle;
    }

    /**
     * The constructor function sets the name and handle properties of an object,
     * with the handle defaulting to the snake case version of the name if not provided.
     *
     * @param name The name parameter is a required parameter that represents the name of the object
     * being constructed.
     * @param handle The `$handle` parameter is an optional parameter that defaults to `null`. If a
     * value is provided for `$handle`, it will be used as the handle for the object. If no value is
     * provided, the handle will be generated by converting the `$handle` parameter to snake case.
     */
    public function __construct($name, $handle = null)
    {
        $this->name = $name;
        $this->handle = $handle ?? Str::snake($name);
    }

    /**
     * This PHP function returns an array of supported types, either from a set list or a default list.
     *
     * @return array An array is being returned. If the object has a set list of supported types, the
     * array will contain the set list. Otherwise, the array will contain the default types.
     */
    public function getfieldsetTypes(): array
    {
        return ! empty($this->fieldsetTypes) ? $this->fieldsetTypes : $this->getDefaultTypes();
    }

    /**
     * This function returns an array of default types based on whether the object has fieldsets or
     * not.
     *
     * @return array An array is being returned. If the object has fieldsets, the array will contain
     * the fieldsets as an array. Otherwise, the array will contain the handle property of the object
     * as the only element.
     */
    private function getDefaultTypes(): array
    {
        if ($this->hasFieldsets()) {
            return $this->getFieldsets()->toArray();
        }

        return [
            $this->handle,
        ];
    }

    /**
     * This PHP function returns the view name based on the given or default type and handle.
     *
     * @param type The  parameter is an optional string parameter that represents the type of view
     * to be returned. If it is not provided, the first type in the default types array will be used.
     * @return string A string value representing the view name.
     */
    public function viewName($type = null): string
    {
        if (Arr::isAssoc($this->getfieldsetTypes())) {
            $type = $this->getfieldsetTypes()[$type];
        }

        $type = $type ?? $this->getDefaultTypes()[0];

        return $this->handle.'.'.$type;
    }

    /**
     * This function returns the path of a component based on its name.
     *
     * @return string The path of the component.
     */
    public function path(): string
    {
        return components_path($this->name);
    }

    /**
     * This function checks if a directory named "fieldsets" exists within a specified path and
     * returns a boolean value.
     *
     * @return bool A boolean value indicating whether a directory named "fieldsets" exists in the path
     * of the current object.
     */
    public function hasFieldsets(): bool
    {
        return File::exists($this->path().'/fieldsets');
    }

    /**
     * This function returns a collection of filenames without extensions from a directory called
     * "fieldsets" within a specified path, or an empty collection if the directory does not exist.
     *
     * @return Collection This function returns a `Collection` of fieldset names. If the directory
     * containing the fieldsets does not exist, an empty `Collection` is returned. Otherwise, the
     * function returns a `Collection` of filenames (without extension) of all the files in the
     * `fieldsets` directory.
     */
    public function getFieldsets(): Collection
    {
        if (! $this->hasFieldsets()) {
            return collect();
        }

        return collect(File::files($this->path().'/fieldsets'))
            ->map(function ($file) {
                return $file->getFilenameWithoutExtension();
            });
    }
}
